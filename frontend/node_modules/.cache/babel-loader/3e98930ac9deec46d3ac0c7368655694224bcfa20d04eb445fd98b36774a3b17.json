{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kenneth\\\\OneDrive\\\\Desktop\\\\test1\\\\frontend\\\\src\\\\pages\\\\Register.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport '../styles/Register.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    email: '',\n    password: ''\n  });\n  const [captchaValue, setCaptchaValue] = useState(null); // Store reCAPTCHA response\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!captchaValue) {\n      alert('Please complete the CAPTCHA');\n      return;\n    }\n    try {\n      const response = await axios.post('http://localhost:5000/api/login', {\n        ...formData,\n        captcha: captchaValue // Send CAPTCHA response to the server\n      });\n      alert('Login successful');\n      navigate('/user-home');\n    } catch (error) {\n      console.error('Login failed', error);\n    }\n  };\n  const handleCaptchaChange = value => {\n    setCaptchaValue(value); // Set the captcha response\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"register\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Email\",\n        value: formData.email,\n        onChange: e => setFormData({\n          ...formData,\n          email: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: formData.password,\n        onChange: e => setFormData({\n          ...formData,\n          password: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReCAPTCHA, {\n        sitekey: \"YOUR_RECAPTCHA_SITE_KEY\" // Add your site key here\n        ,\n        onChange: handleCaptchaChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Register, \"M3uSRq8sTzu5wSfEGM/xP1+WR+Y=\", false, function () {\n  return [useNavigate];\n});\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","axios","useNavigate","ReCAPTCHA","jsxDEV","_jsxDEV","Register","_s","navigate","formData","setFormData","email","password","captchaValue","setCaptchaValue","handleSubmit","e","preventDefault","alert","response","post","captcha","error","console","handleCaptchaChange","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","onChange","target","sitekey","_c","$RefreshReg$"],"sources":["C:/Users/Kenneth/OneDrive/Desktop/test1/frontend/src/pages/Register.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ReCAPTCHA from 'react-google-recaptcha';\r\nimport '../styles/Register.css';\r\n\r\nconst Register = () => {\r\n  const navigate = useNavigate();\r\n  const [formData, setFormData] = useState({\r\n    email: '',\r\n    password: '',\r\n  });\r\n  const [captchaValue, setCaptchaValue] = useState(null); // Store reCAPTCHA response\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!captchaValue) {\r\n      alert('Please complete the CAPTCHA');\r\n      return;\r\n    }\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/login', {\r\n        ...formData,\r\n        captcha: captchaValue,  // Send CAPTCHA response to the server\r\n      });\r\n      alert('Login successful');\r\n      navigate('/user-home');\r\n    } catch (error) {\r\n      console.error('Login failed', error);\r\n    }\r\n  };\r\n\r\n  const handleCaptchaChange = (value) => {\r\n    setCaptchaValue(value); // Set the captcha response\r\n  };\r\n\r\n  return (\r\n    <div className=\"register\">\r\n      <h2>Login</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          value={formData.email}\r\n          onChange={(e) => setFormData({ ...formData, email: e.target.value })}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          value={formData.password}\r\n          onChange={(e) => setFormData({ ...formData, password: e.target.value })}\r\n        />\r\n        <ReCAPTCHA\r\n          sitekey=\"YOUR_RECAPTCHA_SITE_KEY\" // Add your site key here\r\n          onChange={handleCaptchaChange}\r\n        />\r\n        <button type=\"submit\">Login</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}